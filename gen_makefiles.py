#!/usr/bin/env python3
SUBFOLDERS = ["examples/"]


import os
import hashlib
import sys

def purge(args):
    print("Starting to delete all automatically generated, unchanged makefiles in folder:", args[2])
    results = []
    for root, dirs, files in os.walk(args[2]):
        for file in files:
            if file == "makefile" or file == "Makefile":
                results.append(os.path.join(root, file))


    for path in results:
        content = open(path).read().split("|\n")
        if (len(content) == 1):
            print("Keeping '" + path + "' it's not autogenerated")
            continue
        if (len(content[0]) != 34):
            print("Keeping '" + path + "' it's not autogenerated")
            continue

        if content[0].replace("#|","") == hashlib.md5(content[1].encode("UTF-8")).hexdigest():
            print("Deleting '" + path + "'...")
            os.remove(path)
        else:
            print(">> Keeping '" + path + "' because it was changed")

    exit()
    #mainfile.write("\t(find " + to_delete + " -type f -name 'makefile' -exec $(REM) {} \\;)\n")
    #mainfile.write("\t$(REM) makefile\n")

def search_in_folders(path):
    list = os.listdir(path)
    folders_with_c_files = []
    subfolders = []
    for folder in list:
        # go into every path which is not a file, and is not a makefile and thus has no dot
        if folder.find('.') == -1 and folder.find("Makefile") == -1 and folder.find("makefile") == -1:
            if os.path.islink(path + folder):
                print(path + folder + " Is a link, continuing")
                continue
            try:

                lst = os.listdir(path + folder) # list contents of every folder
            except NotADirectoryError:
                print(path + folder, " is no directroy and thus skipped")
                continue
            for fld in lst: # go through one subfolder
                if fld.find('.') == -1: # if an object in a folder is not a file
                    try:
                        ost = os.listdir(path + folder + "/" + fld)
                        if (path + folder + "/") not in subfolders:
                            subfolders.append(path + folder + "/")
                            print("Openable Subfolder detected in ", path + folder + "/ --> ", fld)
                    except NotADirectoryError:
                        # A file is not terminated by .[extension]
                        pass
                    except FileNotFoundError:
                        print(path + folder + "/" + fld, " is no directroy and thus skipped")
            folders_with_c_files.append(chek(path + folder))
    return folders_with_c_files,subfolders

def chek(folder):
    #print("Checking for c files in ", folder)
    c_list = []
    makefile = False
    lst = os.listdir(folder)
    for file in lst:
        #print(lst)
        if file.find('.c') != -1 and file.find('.c~') == -1 and file.find('.cgi') == -1:
            c_list.append(file)
        if file in 'Makefile' or file in "makefile":
            c_list.clear()
            makefile = True
            break

    return folder,c_list,makefile


def main():

    if len(sys.argv) == 3 and sys.argv[1] == "-p": purge(sys.argv)

    folders_with_c_files = []
    subfolders = SUBFOLDERS
    temp = subfolders.copy()
    while(len(subfolders) != 0):
        print("----------------------------------------------------------------\n")
        print("Searching in subfolder: ", subfolders[0])
        a,b = search_in_folders(subfolders[0])
        if len(a) != 0: print("\nFound c files in: ", a)
        if len(b) != 0: print("\nFound subfolders in:", b)
        subfolders.pop(0)
        subfolders.extend(b)
        folders_with_c_files.extend(a)

    all_files = []


    for folder in folders_with_c_files:
        if folder[2] == False and len(folder[1]) > 0:
            # Generate a Makefile in every directory containing c files but not containing a makefile
            f = open(folder[0] + "/makefile", "w")
            f.write("#This is an automatically generated makefile.\n")
            f.write("#If you make changes to it, it will not be deleted by using 'make purge' in the root folder.\n")
            f.write("#To include it again, you need to calculate the md5 hash and replace the first line of the makefile\n")
            f.write("#If you have any questions, send an email to stoerte [a]t posteo.net\n\n")
            f.write("CC = gcc\n")
            f.write("REM = rm\n")
            all_line = "all: "
            for file in folder[1]:
                all_line += file[:-2] + ".bin "
            all_line += "\n\n"
            f.write(all_line)
            for file in folder[1]:
                raw = file[:-2]
                f.write(raw + ".bin: " + raw + ".o\n")
                f.write("\t$(CC) -o " + raw + ".bin " + raw + ".o\n\n")
                f.write(raw + ".o: " + file + "\n")
                f.write("\t$(CC) -c -o " + raw + ".o " + file + "\n\n")

            all_files.append(folder[0] + "/")
            f.write("doxygen:\n")
            f.write("\t(doxygen doxygen.conf)"\n")
            f.write("clean:\n")
            f.write("\t$(REM) *.o\n")
            f.close()
            # Dirty way of writing the has to the first line
            mfile = open(folder[0] + "/makefile")
            cont = mfile.read()
            mfile.close()
            hash = hashlib.md5(cont.encode("UTF-8")).hexdigest()
            mfile = open(folder[0] + "/makefile", "w")
            mfile.write("#|" + hash + "|\n")
            mfile.write(cont)
            mfile.close()


        if folder[2] == True:
            all_files.append(folder[0] + "/")

        # Makefile is either generated or is existing by this point.
        mainfile = open("makefile", "w")
        mainfile.write("#Automatically generated makefile\n")
        mainfile.write("#by gen_makefiles.py by lukas becker\n")
        mainfile.write("#stoerte [a]t posteo.net\n\n")
        mainfile.write("REM = rm\n\n")
        mainfile.write("all:\n")
        for location in all_files:
            mainfile.write("\t(cd " + location + "; make)\n")
        mainfile.write("doxygen:\n")
        for location in all_files:
            mainfile.write("\t(cd " + location + "; make doxygen)\n")
        mainfile.write("clean:\n")
        for location in all_files:
            mainfile.write("\t(cd " + location + "; make clean)\n")
        mainfile.write("tar:\n")
        mainfile.write("\tmkdir -p tar\n")
        for location in all_files:
            # das split is sehr billig
            mainfile.write("\ttar -czvf tar/" + location.replace("examples","").replace("/","") + ".tar.gz " + location + "\n")
            # (tar -czvf lol/unixsockets.tar.gz examples/unixsockets/)

        mainfile.write("purge:\n")
        for to_delete in temp:
            #mainfile.write("\t(find " + to_delete + " -type f -name 'makefile' -exec $(REM) {} \\;)\n")
            mainfile.write("\t(./gen_makefiles.py -p " + to_delete + ")\n")
        mainfile.write("\t$(REM) makefile\n")

main()
